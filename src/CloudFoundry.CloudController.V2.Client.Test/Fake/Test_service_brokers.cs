//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceBrokersEndpoint
{
        [TestMethod]
        public void RetrieveServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""225ef8fd-9314-4add-9875-699589c786c2"",
    ""url"": ""/v2/service_brokers/dc73fc87-d2da-4e64-addb-b48e2a7ab959"",
    ""created_at"": ""2016-02-11T13:20:24Z"",
    ""updated_at"": ""2016-02-11T13:20:24Z""
  },
  ""entity"": {
    ""name"": ""name-7"",
    ""broker_url"": ""https://foo.com/url-4"",
    ""auth_username"": ""auth_username-4"",
    ""space_guid"": ""225ef8fd-9314-4add-9875-699589c786c2""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceBrokers.RetrieveServiceBroker(guid).Result;


                Assert.AreEqual("225ef8fd-9314-4add-9875-699589c786c2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/dc73fc87-d2da-4e64-addb-b48e2a7ab959", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:24Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-7", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://foo.com/url-4", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("auth_username-4", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("225ef8fd-9314-4add-9875-699589c786c2", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

        [TestMethod]
        public void CreateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""e6da864b-49f3-44e4-b62f-72cd7fb84b46"",
    ""created_at"": ""2016-02-11T13:20:24Z"",
    ""updated_at"": null,
    ""url"": ""/v2/service_brokers/103e6cbf-01a5-4b52-8a77-ad23f952e108""
  },
  ""entity"": {
    ""name"": ""service-broker-name"",
    ""broker_url"": ""https://broker.example.com"",
    ""auth_username"": ""admin"",
    ""space_guid"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateServiceBrokerRequest value = new CreateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.CreateServiceBroker(value).Result;


                Assert.AreEqual("e6da864b-49f3-44e4-b62f-72cd7fb84b46", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-02-11T13:20:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/103e6cbf-01a5-4b52-8a77-ad23f952e108", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("service-broker-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://broker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

        [TestMethod]
        public void DeleteServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServiceBrokers.DeleteServiceBroker(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllServiceBrokersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""9b8eeee0-8cd0-4303-9e19-d0ca31a5e1f2"",
        ""url"": ""/v2/service_brokers/cbb5c4a2-38d8-44f1-ae3d-d087db7105d5"",
        ""created_at"": ""2016-02-11T13:20:24Z"",
        ""updated_at"": ""2016-02-11T13:20:24Z""
      },
      ""entity"": {
        ""name"": ""name-25"",
        ""broker_url"": ""https://foo.com/url-13"",
        ""auth_username"": ""auth_username-13"",
        ""space_guid"": ""9b8eeee0-8cd0-4303-9e19-d0ca31a5e1f2""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""9b8eeee0-8cd0-4303-9e19-d0ca31a5e1f2"",
        ""url"": ""/v2/service_brokers/ecc69577-1588-4e0d-859d-7c4c2723f1b4"",
        ""created_at"": ""2016-02-11T13:20:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-26"",
        ""broker_url"": ""https://foo.com/url-14"",
        ""auth_username"": ""auth_username-14"",
        ""space_guid"": null
      }
    },
    {
      ""metadata"": {
        ""guid"": ""9b8eeee0-8cd0-4303-9e19-d0ca31a5e1f2"",
        ""url"": ""/v2/service_brokers/ceaa3cef-c211-4932-b37e-a1e90bf73ba5"",
        ""created_at"": ""2016-02-11T13:20:24Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-27"",
        ""broker_url"": ""https://foo.com/url-15"",
        ""auth_username"": ""auth_username-15"",
        ""space_guid"": null
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceBrokers.ListAllServiceBrokers().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("9b8eeee0-8cd0-4303-9e19-d0ca31a5e1f2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/cbb5c4a2-38d8-44f1-ae3d-d087db7105d5", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:24Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-25", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("https://foo.com/url-13", TestUtil.ToTestableString(obj[0].BrokerUrl), true);
                Assert.AreEqual("auth_username-13", TestUtil.ToTestableString(obj[0].AuthUsername), true);
                Assert.AreEqual("9b8eeee0-8cd0-4303-9e19-d0ca31a5e1f2", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("9b8eeee0-8cd0-4303-9e19-d0ca31a5e1f2", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/ecc69577-1588-4e0d-859d-7c4c2723f1b4", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:24Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-26", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("https://foo.com/url-14", TestUtil.ToTestableString(obj[1].BrokerUrl), true);
                Assert.AreEqual("auth_username-14", TestUtil.ToTestableString(obj[1].AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("9b8eeee0-8cd0-4303-9e19-d0ca31a5e1f2", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_brokers/ceaa3cef-c211-4932-b37e-a1e90bf73ba5", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:24Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-27", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("https://foo.com/url-15", TestUtil.ToTestableString(obj[2].BrokerUrl), true);
                Assert.AreEqual("auth_username-15", TestUtil.ToTestableString(obj[2].AuthUsername), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].SpaceGuid), true);

            }
        }

        [TestMethod]
        public void UpdateServiceBrokerTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2758aafd-9cce-4dc9-8ee4-165b1949330c"",
    ""created_at"": ""2016-02-11T13:20:24Z"",
    ""updated_at"": ""2016-02-11T13:20:24Z"",
    ""url"": ""/v2/service_brokers/69b475ab-4aa4-476a-bc56-f14334c68430""
  },
  ""entity"": {
    ""name"": ""name-13"",
    ""broker_url"": ""https://mybroker.example.com"",
    ""auth_username"": ""admin-user"",
    ""space_guid"": ""2758aafd-9cce-4dc9-8ee4-165b1949330c""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateServiceBrokerRequest value = new UpdateServiceBrokerRequest();


                var obj = cfClient.ServiceBrokers.UpdateServiceBroker(guid, value).Result;


                Assert.AreEqual("2758aafd-9cce-4dc9-8ee4-165b1949330c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-02-11T13:20:24Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:24Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("/v2/service_brokers/69b475ab-4aa4-476a-bc56-f14334c68430", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("name-13", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("https://mybroker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
                Assert.AreEqual("admin-user", TestUtil.ToTestableString(obj.AuthUsername), true);
                Assert.AreEqual("2758aafd-9cce-4dc9-8ee4-165b1949330c", TestUtil.ToTestableString(obj.SpaceGuid), true);

            }
        }

    }
}