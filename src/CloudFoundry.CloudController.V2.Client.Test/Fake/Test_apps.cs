//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class AppsEndpoint
{
        [TestMethod]
        public void GetEnvForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""staging_env_json"": {
    ""STAGING_ENV"": ""staging_value""
  },
  ""running_env_json"": {
    ""RUNNING_ENV"": ""running_value""
  },
  ""environment_json"": {
    ""env_var"": ""env_val""
  },
  ""system_env_json"": {
    ""VCAP_SERVICES"": {

    }
  },
  ""application_env_json"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""mem"": 1024,
        ""disk"": 1024,
        ""fds"": 16384
      },
      ""application_id"": ""b5005ea0-0144-4286-9153-2b5461bbc479"",
      ""application_version"": ""d37acde1-ed6d-4c95-b93e-b52dfed154d3"",
      ""application_name"": ""name-1888"",
      ""application_uris"": [

      ],
      ""version"": ""d37acde1-ed6d-4c95-b93e-b52dfed154d3"",
      ""name"": ""name-1888"",
      ""space_name"": ""name-1889"",
      ""space_id"": ""4424b1a1-e81d-4f66-b9f2-b270962532d5"",
      ""uris"": [

      ],
      ""users"": null
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetEnvForApp(guid).Result;



            }
        }

        [TestMethod]
        public void ListAllAppsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""211d8399-40fa-4aaa-9c95-24c83006a333"",
        ""url"": ""/v2/apps/39e48029-fc70-4576-988a-f0d606570e0f"",
        ""created_at"": ""2016-02-11T13:20:48Z"",
        ""updated_at"": ""2016-02-11T13:20:48Z""
      },
      ""entity"": {
        ""name"": ""name-1964"",
        ""production"": false,
        ""space_guid"": ""211d8399-40fa-4aaa-9c95-24c83006a333"",
        ""stack_guid"": ""211d8399-40fa-4aaa-9c95-24c83006a333"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""766fe540-d301-44a4-90de-0aecf767d097"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-02-11T13:20:48Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/e2072025-d5d2-4504-8682-a4a3200d0b94"",
        ""stack_url"": ""/v2/stacks/f9e1a9da-2953-45c1-a042-ef84df30430e"",
        ""events_url"": ""/v2/apps/39e48029-fc70-4576-988a-f0d606570e0f/events"",
        ""service_bindings_url"": ""/v2/apps/39e48029-fc70-4576-988a-f0d606570e0f/service_bindings"",
        ""routes_url"": ""/v2/apps/39e48029-fc70-4576-988a-f0d606570e0f/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""211d8399-40fa-4aaa-9c95-24c83006a333"",
        ""url"": ""/v2/apps/e4f024fe-9458-4e64-8aff-bd047827a1b3"",
        ""created_at"": ""2016-02-11T13:20:48Z"",
        ""updated_at"": ""2016-02-11T13:20:48Z""
      },
      ""entity"": {
        ""name"": ""name-1969"",
        ""production"": false,
        ""space_guid"": ""211d8399-40fa-4aaa-9c95-24c83006a333"",
        ""stack_guid"": ""211d8399-40fa-4aaa-9c95-24c83006a333"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""9b35f578-7d99-463f-9fd6-5c4a35f655ea"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-02-11T13:20:48Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/d1911de0-2145-4f31-8dd5-9749404c0307"",
        ""stack_url"": ""/v2/stacks/0ae484a0-5490-49e9-bd13-e93c1699450b"",
        ""events_url"": ""/v2/apps/e4f024fe-9458-4e64-8aff-bd047827a1b3/events"",
        ""service_bindings_url"": ""/v2/apps/e4f024fe-9458-4e64-8aff-bd047827a1b3/service_bindings"",
        ""routes_url"": ""/v2/apps/e4f024fe-9458-4e64-8aff-bd047827a1b3/routes""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""211d8399-40fa-4aaa-9c95-24c83006a333"",
        ""url"": ""/v2/apps/e81398e6-6f69-415d-a807-0e4bb83cbef3"",
        ""created_at"": ""2016-02-11T13:20:48Z"",
        ""updated_at"": ""2016-02-11T13:20:48Z""
      },
      ""entity"": {
        ""name"": ""name-1959"",
        ""production"": false,
        ""space_guid"": ""211d8399-40fa-4aaa-9c95-24c83006a333"",
        ""stack_guid"": ""211d8399-40fa-4aaa-9c95-24c83006a333"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""ef9cc4e5-2e24-40d5-838a-f8392d00adca"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""staging_failed_description"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-02-11T13:20:48Z"",
        ""detected_start_command"": """",
        ""enable_ssh"": true,
        ""docker_credentials_json"": {
          ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
        },
        ""ports"": null,
        ""space_url"": ""/v2/spaces/543af18b-a852-4431-88c8-60fbc600e541"",
        ""stack_url"": ""/v2/stacks/24388e96-45dd-470b-b08f-52f2674e81c0"",
        ""events_url"": ""/v2/apps/e81398e6-6f69-415d-a807-0e4bb83cbef3/events"",
        ""service_bindings_url"": ""/v2/apps/e81398e6-6f69-415d-a807-0e4bb83cbef3/service_bindings"",
        ""routes_url"": ""/v2/apps/e81398e6-6f69-415d-a807-0e4bb83cbef3/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Apps.ListAllApps().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("211d8399-40fa-4aaa-9c95-24c83006a333", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/39e48029-fc70-4576-988a-f0d606570e0f", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1964", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("211d8399-40fa-4aaa-9c95-24c83006a333", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("211d8399-40fa-4aaa-9c95-24c83006a333", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("766fe540-d301-44a4-90de-0aecf767d097", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Ports), true);
                Assert.AreEqual("/v2/spaces/e2072025-d5d2-4504-8682-a4a3200d0b94", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/f9e1a9da-2953-45c1-a042-ef84df30430e", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/39e48029-fc70-4576-988a-f0d606570e0f/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/39e48029-fc70-4576-988a-f0d606570e0f/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/39e48029-fc70-4576-988a-f0d606570e0f/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("211d8399-40fa-4aaa-9c95-24c83006a333", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/e4f024fe-9458-4e64-8aff-bd047827a1b3", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1969", TestUtil.ToTestableString(obj[1].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Production), true);
                Assert.AreEqual("211d8399-40fa-4aaa-9c95-24c83006a333", TestUtil.ToTestableString(obj[1].SpaceGuid), true);
                Assert.AreEqual("211d8399-40fa-4aaa-9c95-24c83006a333", TestUtil.ToTestableString(obj[1].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[1].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[1].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[1].State), true);
                Assert.AreEqual("9b35f578-7d99-463f-9fd6-5c4a35f655ea", TestUtil.ToTestableString(obj[1].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[1].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[1].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DockerImage), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj[1].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Ports), true);
                Assert.AreEqual("/v2/spaces/d1911de0-2145-4f31-8dd5-9749404c0307", TestUtil.ToTestableString(obj[1].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/0ae484a0-5490-49e9-bd13-e93c1699450b", TestUtil.ToTestableString(obj[1].StackUrl), true);
                Assert.AreEqual("/v2/apps/e4f024fe-9458-4e64-8aff-bd047827a1b3/events", TestUtil.ToTestableString(obj[1].EventsUrl), true);
                Assert.AreEqual("/v2/apps/e4f024fe-9458-4e64-8aff-bd047827a1b3/service_bindings", TestUtil.ToTestableString(obj[1].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/e4f024fe-9458-4e64-8aff-bd047827a1b3/routes", TestUtil.ToTestableString(obj[1].RoutesUrl), true);
                Assert.AreEqual("211d8399-40fa-4aaa-9c95-24c83006a333", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/e81398e6-6f69-415d-a807-0e4bb83cbef3", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1959", TestUtil.ToTestableString(obj[2].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Production), true);
                Assert.AreEqual("211d8399-40fa-4aaa-9c95-24c83006a333", TestUtil.ToTestableString(obj[2].SpaceGuid), true);
                Assert.AreEqual("211d8399-40fa-4aaa-9c95-24c83006a333", TestUtil.ToTestableString(obj[2].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[2].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[2].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[2].State), true);
                Assert.AreEqual("ef9cc4e5-2e24-40d5-838a-f8392d00adca", TestUtil.ToTestableString(obj[2].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[2].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[2].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[2].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DockerImage), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj[2].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[2].EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].Ports), true);
                Assert.AreEqual("/v2/spaces/543af18b-a852-4431-88c8-60fbc600e541", TestUtil.ToTestableString(obj[2].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/24388e96-45dd-470b-b08f-52f2674e81c0", TestUtil.ToTestableString(obj[2].StackUrl), true);
                Assert.AreEqual("/v2/apps/e81398e6-6f69-415d-a807-0e4bb83cbef3/events", TestUtil.ToTestableString(obj[2].EventsUrl), true);
                Assert.AreEqual("/v2/apps/e81398e6-6f69-415d-a807-0e4bb83cbef3/service_bindings", TestUtil.ToTestableString(obj[2].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/e81398e6-6f69-415d-a807-0e4bb83cbef3/routes", TestUtil.ToTestableString(obj[2].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceBindingsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""6b05759e-e385-4dbe-9c40-ac3eb330f9d2"",
        ""url"": ""/v2/service_bindings/408404f4-cdad-4eac-bcd3-83efbc4bbb6b"",
        ""created_at"": ""2016-02-11T13:20:46Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""app_guid"": ""6b05759e-e385-4dbe-9c40-ac3eb330f9d2"",
        ""service_instance_guid"": ""6b05759e-e385-4dbe-9c40-ac3eb330f9d2"",
        ""credentials"": {
          ""creds-key-500"": ""creds-val-500""
        },
        ""binding_options"": {

        },
        ""gateway_data"": null,
        ""gateway_name"": """",
        ""syslog_drain_url"": null,
        ""app_url"": ""/v2/apps/8aeaea3a-6719-4bb9-841c-31b81340da14"",
        ""service_instance_url"": ""/v2/service_instances/11d31e87-3727-4877-aa2a-db6037682dd7""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllServiceBindingsForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("6b05759e-e385-4dbe-9c40-ac3eb330f9d2", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_bindings/408404f4-cdad-4eac-bcd3-83efbc4bbb6b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:46Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("6b05759e-e385-4dbe-9c40-ac3eb330f9d2", TestUtil.ToTestableString(obj[0].AppGuid), true);
                Assert.AreEqual("6b05759e-e385-4dbe-9c40-ac3eb330f9d2", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayName), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SyslogDrainUrl), true);
                Assert.AreEqual("/v2/apps/8aeaea3a-6719-4bb9-841c-31b81340da14", TestUtil.ToTestableString(obj[0].AppUrl), true);
                Assert.AreEqual("/v2/service_instances/11d31e87-3727-4877-aa2a-db6037682dd7", TestUtil.ToTestableString(obj[0].ServiceInstanceUrl), true);

            }
        }

        [TestMethod]
        public void RestageAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""ca5d161c-a798-44df-a8bd-0add6260856a"",
    ""url"": ""/v2/apps/f72aff1e-a143-4704-b446-73338014e3d9"",
    ""created_at"": ""2016-02-11T13:20:45Z"",
    ""updated_at"": ""2016-02-11T13:20:45Z""
  },
  ""entity"": {
    ""name"": ""name-1722"",
    ""production"": false,
    ""space_guid"": ""ca5d161c-a798-44df-a8bd-0add6260856a"",
    ""stack_guid"": ""ca5d161c-a798-44df-a8bd-0add6260856a"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STARTED"",
    ""version"": ""36efd036-385b-46bf-9cfc-ab4c23aee583"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-02-11T13:20:45Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RestageApp(guid).Result;


                Assert.AreEqual("ca5d161c-a798-44df-a8bd-0add6260856a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/f72aff1e-a143-4704-b446-73338014e3d9", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:45Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:45Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1722", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("ca5d161c-a798-44df-a8bd-0add6260856a", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("ca5d161c-a798-44df-a8bd-0add6260856a", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STARTED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("36efd036-385b-46bf-9cfc-ab4c23aee583", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-02-11T13:20:45Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""cff90974-af83-45ab-af6a-cfeec8e0a867"",
        ""url"": ""/v2/routes/37d17c10-8c76-4257-9fa9-1e38840c7da4"",
        ""created_at"": ""2016-02-11T13:20:45Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-19"",
        ""path"": """",
        ""domain_guid"": ""cff90974-af83-45ab-af6a-cfeec8e0a867"",
        ""space_guid"": ""cff90974-af83-45ab-af6a-cfeec8e0a867"",
        ""service_instance_guid"": null,
        ""port"": 0,
        ""domain_url"": ""/v2/domains/758d9a60-54fa-40a4-a493-51de81d57265"",
        ""space_url"": ""/v2/spaces/29f0cd6b-0eaf-47e7-b693-00a23b23a8b5"",
        ""apps_url"": ""/v2/routes/37d17c10-8c76-4257-9fa9-1e38840c7da4/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.ListAllRoutesForApp(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("cff90974-af83-45ab-af6a-cfeec8e0a867", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/37d17c10-8c76-4257-9fa9-1e38840c7da4", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:45Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-19", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Path), true);
                Assert.AreEqual("cff90974-af83-45ab-af6a-cfeec8e0a867", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("cff90974-af83-45ab-af6a-cfeec8e0a867", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].ServiceInstanceGuid), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj[0].Port), true);
                Assert.AreEqual("/v2/domains/758d9a60-54fa-40a4-a493-51de81d57265", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/29f0cd6b-0eaf-47e7-b693-00a23b23a8b5", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/37d17c10-8c76-4257-9fa9-1e38840c7da4/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveRouteFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                cfClient.Apps.RemoveRouteFromApp(guid, route_guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateRouteWithAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d4260cfc-277c-4e70-863a-9f6f28ce27bd"",
    ""url"": ""/v2/apps/323f1ac8-26d5-4479-bc44-62e169e316f3"",
    ""created_at"": ""2016-02-11T13:20:45Z"",
    ""updated_at"": ""2016-02-11T13:20:46Z""
  },
  ""entity"": {
    ""name"": ""name-1759"",
    ""production"": false,
    ""space_guid"": ""d4260cfc-277c-4e70-863a-9f6f28ce27bd"",
    ""stack_guid"": ""d4260cfc-277c-4e70-863a-9f6f28ce27bd"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""46d7b267-5445-408b-938b-f87fa23f0613"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-02-11T13:20:45Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/42817edf-d168-49a8-a41a-00d691981b1b"",
    ""stack_url"": ""/v2/stacks/d30453ad-bd24-4fe3-b5b0-bc89e9d87e4c"",
    ""events_url"": ""/v2/apps/323f1ac8-26d5-4479-bc44-62e169e316f3/events"",
    ""service_bindings_url"": ""/v2/apps/323f1ac8-26d5-4479-bc44-62e169e316f3/service_bindings"",
    ""routes_url"": ""/v2/apps/323f1ac8-26d5-4479-bc44-62e169e316f3/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? route_guid = Guid.NewGuid();


                var obj = cfClient.Apps.AssociateRouteWithApp(guid, route_guid).Result;


                Assert.AreEqual("d4260cfc-277c-4e70-863a-9f6f28ce27bd", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/323f1ac8-26d5-4479-bc44-62e169e316f3", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:45Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:46Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1759", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("d4260cfc-277c-4e70-863a-9f6f28ce27bd", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("d4260cfc-277c-4e70-863a-9f6f28ce27bd", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("46d7b267-5445-408b-938b-f87fa23f0613", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-02-11T13:20:45Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/42817edf-d168-49a8-a41a-00d691981b1b", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/d30453ad-bd24-4fe3-b5b0-bc89e9d87e4c", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/323f1ac8-26d5-4479-bc44-62e169e316f3/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/323f1ac8-26d5-4479-bc44-62e169e316f3/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/323f1ac8-26d5-4479-bc44-62e169e316f3/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void GetInstanceInformationForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""since"": 1403140717.984577,
    ""debug_ip"": null,
    ""debug_port"": null,
    ""console_ip"": null,
    ""console_port"": null
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetInstanceInformationForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void GetAppSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
  ""name"": ""name-2417"",
  ""routes"": [
    {
      ""guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
      ""host"": ""host-30"",
      ""domain"": {
        ""guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
        ""name"": ""domain-56.example.com""
      }
    }
  ],
  ""running_instances"": 0,
  ""services"": [
    {
      ""guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
      ""name"": ""name-2419"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
        ""name"": ""name-2420"",
        ""service"": {
          ""guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
          ""label"": ""label-94"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ],
  ""available_domains"": [
    {
      ""guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
      ""name"": ""domain-56.example.com"",
      ""owning_organization_guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4""
    },
    {
      ""guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
      ""name"": ""customer-app-domain1.com"",
      ""router_group_guid"": null
    },
    {
      ""guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
      ""name"": ""customer-app-domain2.com"",
      ""router_group_guid"": null
    }
  ],
  ""production"": false,
  ""space_guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
  ""stack_guid"": ""3b4029fe-b500-4fdf-ae3d-443a138509d4"",
  ""buildpack"": null,
  ""detected_buildpack"": null,
  ""environment_json"": null,
  ""memory"": 1024,
  ""instances"": 1,
  ""disk_quota"": 1024,
  ""state"": ""STOPPED"",
  ""version"": ""555b0761-5459-4317-8eae-0380e5127e38"",
  ""command"": null,
  ""console"": false,
  ""debug"": null,
  ""staging_task_id"": null,
  ""package_state"": ""PENDING"",
  ""health_check_type"": ""port"",
  ""health_check_timeout"": null,
  ""staging_failed_reason"": null,
  ""staging_failed_description"": null,
  ""diego"": false,
  ""docker_image"": null,
  ""package_updated_at"": ""2016-02-11T13:20:58Z"",
  ""detected_start_command"": """",
  ""enable_ssh"": true,
  ""docker_credentials_json"": {
    ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
  },
  ""ports"": null
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetAppSummary(guid).Result;


                Assert.AreEqual("3b4029fe-b500-4fdf-ae3d-443a138509d4", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-2417", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("0", TestUtil.ToTestableString(obj.RunningInstances), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("3b4029fe-b500-4fdf-ae3d-443a138509d4", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("3b4029fe-b500-4fdf-ae3d-443a138509d4", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("555b0761-5459-4317-8eae-0380e5127e38", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-02-11T13:20:58Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);

            }
        }

        [TestMethod]
        public void GetDetailedStatsForStartedAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""0"": {
    ""state"": ""RUNNING"",
    ""stats"": {
      ""usage"": {
        ""disk"": 66392064,
        ""mem"": 29880320,
        ""cpu"": 0.13511219703079957,
        ""time"": ""2014-06-19 22:37:58 +0000""
      },
      ""name"": ""app_name"",
      ""uris"": [
        ""app_name.example.com""
      ],
      ""host"": ""10.0.0.1"",
      ""port"": 61035,
      ""uptime"": 65007,
      ""mem_quota"": 536870912,
      ""disk_quota"": 1073741824,
      ""fds_quota"": 16384
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.GetDetailedStatsForStartedApp(guid).Result;



            }
        }

        [TestMethod]
        public void UploadsBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f6b8a96c-8487-4e96-adfa-0b8d8a4a3e0f"",
    ""created_at"": ""2016-02-11T13:20:49Z"",
    ""url"": ""/v2/jobs/9b786065-4dd6-4c6c-99f4-79cc7f0a1386""
  },
  ""entity"": {
    ""guid"": ""f6b8a96c-8487-4e96-adfa-0b8d8a4a3e0f"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                dynamic value = null;


                var obj = cfClient.Apps.UploadsBitsForApp(guid, value).Result;


                Assert.AreEqual("f6b8a96c-8487-4e96-adfa-0b8d8a4a3e0f", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-02-11T13:20:49Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/9b786065-4dd6-4c6c-99f4-79cc7f0a1386", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("f6b8a96c-8487-4e96-adfa-0b8d8a4a3e0f", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void UpdateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""130caf9d-630a-4764-a5a8-4e9efa39044d"",
    ""url"": ""/v2/apps/592f465c-7248-4f71-9c95-b99a4cefdc2e"",
    ""created_at"": ""2016-02-11T13:20:48Z"",
    ""updated_at"": ""2016-02-11T13:20:48Z""
  },
  ""entity"": {
    ""name"": ""new_name"",
    ""production"": false,
    ""space_guid"": ""130caf9d-630a-4764-a5a8-4e9efa39044d"",
    ""stack_guid"": ""130caf9d-630a-4764-a5a8-4e9efa39044d"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""399c1df2-2e6d-403a-b2cc-f8cab421122b"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-02-11T13:20:48Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/2fd0d65c-3698-46c4-9efa-6a5a7f254c12"",
    ""stack_url"": ""/v2/stacks/73c6cc54-3b3c-493a-90c6-4f2dff0de345"",
    ""events_url"": ""/v2/apps/592f465c-7248-4f71-9c95-b99a4cefdc2e/events"",
    ""service_bindings_url"": ""/v2/apps/592f465c-7248-4f71-9c95-b99a4cefdc2e/service_bindings"",
    ""routes_url"": ""/v2/apps/592f465c-7248-4f71-9c95-b99a4cefdc2e/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateAppRequest value = new UpdateAppRequest();


                var obj = cfClient.Apps.UpdateApp(guid, value).Result;


                Assert.AreEqual("130caf9d-630a-4764-a5a8-4e9efa39044d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/592f465c-7248-4f71-9c95-b99a4cefdc2e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("new_name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("130caf9d-630a-4764-a5a8-4e9efa39044d", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("130caf9d-630a-4764-a5a8-4e9efa39044d", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("399c1df2-2e6d-403a-b2cc-f8cab421122b", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/2fd0d65c-3698-46c4-9efa-6a5a7f254c12", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/73c6cc54-3b3c-493a-90c6-4f2dff0de345", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/592f465c-7248-4f71-9c95-b99a4cefdc2e/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/592f465c-7248-4f71-9c95-b99a4cefdc2e/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/592f465c-7248-4f71-9c95-b99a4cefdc2e/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void DownloadsStagedDropletForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)302;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DownloadsStagedDropletForApp(guid).Wait();

            }
        }

        [TestMethod]
        public void TerminateRunningAppInstanceAtGivenIndexTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                int? index = 0;


                cfClient.Apps.TerminateRunningAppInstanceAtGivenIndex(guid, index).Wait();

            }
        }

        [TestMethod]
        public void DownloadsBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)302;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DownloadsBitsForApp(guid).Wait();

            }
        }

        [TestMethod]
        public void RemoveServiceBindingFromAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? service_binding_guid = Guid.NewGuid();


                cfClient.Apps.RemoveServiceBindingFromApp(guid, service_binding_guid).Wait();

            }
        }

        [TestMethod]
        public void CreateAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7caf57ae-8490-4a6b-b2e7-0d3fd223d8c2"",
    ""url"": ""/v2/apps/a377de22-acf2-4fb8-829a-fb533edb40b2"",
    ""created_at"": ""2016-02-11T13:20:48Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my_super_app"",
    ""production"": false,
    ""space_guid"": ""7caf57ae-8490-4a6b-b2e7-0d3fd223d8c2"",
    ""stack_guid"": ""7caf57ae-8490-4a6b-b2e7-0d3fd223d8c2"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""e580dddc-9a78-4087-bd2e-84e3528ccfb0"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": null,
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": [
      1000,
      2000
    ],
    ""space_url"": ""/v2/spaces/a6de5f9d-ce25-448c-866f-549f1a45ad2a"",
    ""stack_url"": ""/v2/stacks/e2913c68-28e8-453c-83bd-0ae52e6ce898"",
    ""events_url"": ""/v2/apps/a377de22-acf2-4fb8-829a-fb533edb40b2/events"",
    ""service_bindings_url"": ""/v2/apps/a377de22-acf2-4fb8-829a-fb533edb40b2/service_bindings"",
    ""routes_url"": ""/v2/apps/a377de22-acf2-4fb8-829a-fb533edb40b2/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateAppRequest value = new CreateAppRequest();


                var obj = cfClient.Apps.CreateApp(value).Result;


                Assert.AreEqual("7caf57ae-8490-4a6b-b2e7-0d3fd223d8c2", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/a377de22-acf2-4fb8-829a-fb533edb40b2", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my_super_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("7caf57ae-8490-4a6b-b2e7-0d3fd223d8c2", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("7caf57ae-8490-4a6b-b2e7-0d3fd223d8c2", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("e580dddc-9a78-4087-bd2e-84e3528ccfb0", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("/v2/spaces/a6de5f9d-ce25-448c-866f-549f1a45ad2a", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/e2913c68-28e8-453c-83bd-0ae52e6ce898", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/a377de22-acf2-4fb8-829a-fb533edb40b2/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/a377de22-acf2-4fb8-829a-fb533edb40b2/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/a377de22-acf2-4fb8-829a-fb533edb40b2/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void CopyAppBitsForAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a5502320-27f0-464a-be2f-c1acfbfcdbc8"",
    ""created_at"": ""2016-02-11T13:20:49Z"",
    ""url"": ""/v2/jobs/e0918241-fddd-4dcc-a473-ba3856a60461""
  },
  ""entity"": {
    ""guid"": ""a5502320-27f0-464a-be2f-c1acfbfcdbc8"",
    ""status"": ""queued""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                CopyAppBitsForAppRequest value = new CopyAppBitsForAppRequest();


                var obj = cfClient.Apps.CopyAppBitsForApp(guid, value).Result;


                Assert.AreEqual("a5502320-27f0-464a-be2f-c1acfbfcdbc8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-02-11T13:20:49Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("/v2/jobs/e0918241-fddd-4dcc-a473-ba3856a60461", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("a5502320-27f0-464a-be2f-c1acfbfcdbc8", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("queued", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void CreateDockerAppExperimentalTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bf1efc86-24f3-4cc6-860b-feba8fcacf59"",
    ""url"": ""/v2/apps/c83b5ca4-7917-47f1-b6a9-9f4a2d343738"",
    ""created_at"": ""2016-02-11T13:20:47Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""docker_app"",
    ""production"": false,
    ""space_guid"": ""bf1efc86-24f3-4cc6-860b-feba8fcacf59"",
    ""stack_guid"": ""bf1efc86-24f3-4cc6-860b-feba8fcacf59"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": {

    },
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""544a1ede-4fbf-4ec6-9607-cbc530b8280c"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": true,
    ""docker_image"": ""cloudfoundry/hello:latest"",
    ""package_updated_at"": ""2016-02-11T13:20:47Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/6076d36d-29d3-40d7-8ef2-9db28d1378a6"",
    ""stack_url"": ""/v2/stacks/e2913c68-28e8-453c-83bd-0ae52e6ce898"",
    ""events_url"": ""/v2/apps/c83b5ca4-7917-47f1-b6a9-9f4a2d343738/events"",
    ""service_bindings_url"": ""/v2/apps/c83b5ca4-7917-47f1-b6a9-9f4a2d343738/service_bindings"",
    ""routes_url"": ""/v2/apps/c83b5ca4-7917-47f1-b6a9-9f4a2d343738/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateDockerAppExperimentalRequest value = new CreateDockerAppExperimentalRequest();


                var obj = cfClient.Apps.CreateDockerAppExperimental(value).Result;


                Assert.AreEqual("bf1efc86-24f3-4cc6-860b-feba8fcacf59", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/c83b5ca4-7917-47f1-b6a9-9f4a2d343738", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:47Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("docker_app", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("bf1efc86-24f3-4cc6-860b-feba8fcacf59", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("bf1efc86-24f3-4cc6-860b-feba8fcacf59", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("544a1ede-4fbf-4ec6-9607-cbc530b8280c", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("cloudfoundry/hello:latest", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-02-11T13:20:47Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/6076d36d-29d3-40d7-8ef2-9db28d1378a6", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/e2913c68-28e8-453c-83bd-0ae52e6ce898", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/c83b5ca4-7917-47f1-b6a9-9f4a2d343738/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/c83b5ca4-7917-47f1-b6a9-9f4a2d343738/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/c83b5ca4-7917-47f1-b6a9-9f4a2d343738/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f7a1ff31-f0c6-49d3-803f-63b410daceac"",
    ""url"": ""/v2/apps/24de66aa-ac10-49ae-9169-7ba324161024"",
    ""created_at"": ""2016-02-11T13:20:48Z"",
    ""updated_at"": ""2016-02-11T13:20:48Z""
  },
  ""entity"": {
    ""name"": ""name-1939"",
    ""production"": false,
    ""space_guid"": ""f7a1ff31-f0c6-49d3-803f-63b410daceac"",
    ""stack_guid"": ""f7a1ff31-f0c6-49d3-803f-63b410daceac"",
    ""buildpack"": null,
    ""detected_buildpack"": null,
    ""environment_json"": null,
    ""memory"": 1024,
    ""instances"": 1,
    ""disk_quota"": 1024,
    ""state"": ""STOPPED"",
    ""version"": ""f9bc0152-ebc3-4cc5-a95a-ea8fe21e4ae8"",
    ""command"": null,
    ""console"": false,
    ""debug"": null,
    ""staging_task_id"": null,
    ""package_state"": ""PENDING"",
    ""health_check_type"": ""port"",
    ""health_check_timeout"": null,
    ""staging_failed_reason"": null,
    ""staging_failed_description"": null,
    ""diego"": false,
    ""docker_image"": null,
    ""package_updated_at"": ""2016-02-11T13:20:48Z"",
    ""detected_start_command"": """",
    ""enable_ssh"": true,
    ""docker_credentials_json"": {
      ""redacted_message"": ""[PRIVATE DATA HIDDEN]""
    },
    ""ports"": null,
    ""space_url"": ""/v2/spaces/4d7d6e7b-274b-4518-8cdc-c306d536809e"",
    ""stack_url"": ""/v2/stacks/eb192f21-8c29-4785-af02-89319481444e"",
    ""events_url"": ""/v2/apps/24de66aa-ac10-49ae-9169-7ba324161024/events"",
    ""service_bindings_url"": ""/v2/apps/24de66aa-ac10-49ae-9169-7ba324161024/service_bindings"",
    ""routes_url"": ""/v2/apps/24de66aa-ac10-49ae-9169-7ba324161024/routes""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Apps.RetrieveApp(guid).Result;


                Assert.AreEqual("f7a1ff31-f0c6-49d3-803f-63b410daceac", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/24de66aa-ac10-49ae-9169-7ba324161024", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1939", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Production), true);
                Assert.AreEqual("f7a1ff31-f0c6-49d3-803f-63b410daceac", TestUtil.ToTestableString(obj.SpaceGuid), true);
                Assert.AreEqual("f7a1ff31-f0c6-49d3-803f-63b410daceac", TestUtil.ToTestableString(obj.StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj.DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("f9bc0152-ebc3-4cc5-a95a-ea8fe21e4ae8", TestUtil.ToTestableString(obj.Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj.HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.StagingFailedDescription), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DockerImage), true);
                Assert.AreEqual("2016-02-11T13:20:48Z", TestUtil.ToTestableString(obj.PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj.EnableSsh), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Ports), true);
                Assert.AreEqual("/v2/spaces/4d7d6e7b-274b-4518-8cdc-c306d536809e", TestUtil.ToTestableString(obj.SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/eb192f21-8c29-4785-af02-89319481444e", TestUtil.ToTestableString(obj.StackUrl), true);
                Assert.AreEqual("/v2/apps/24de66aa-ac10-49ae-9169-7ba324161024/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/apps/24de66aa-ac10-49ae-9169-7ba324161024/service_bindings", TestUtil.ToTestableString(obj.ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/24de66aa-ac10-49ae-9169-7ba324161024/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteAppTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Apps.DeleteApp(guid).Wait();

            }
        }

    }
}